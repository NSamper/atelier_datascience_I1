# Packages génériques
import sys
import os
import importlib
import numpy as np
import pandas as pd

# Graphiques
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib as mpl
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder
from datetime import datetime

dataset = "export_alimconfiance.csv"

dataset = pd.read_csv(dataset)

dataset.head()


## PART 1

# Remove useless columns
COLUMNS_NON_HIERAR = ["APP_Libelle_etablissement", "Adresse_2_UA", "Code_postal", "Libelle_commune", "APP_Libelle_activite_etablissement", "geores", "filtre", "ods_type_activite"]
COLUMNS_HIERRAR = ["Synthese_eval_sanit", "Date_inspection"]
dataset = dataset[COLUMNS_NON_HIERAR + COLUMNS_HIERRAR]

dataset.describe()

COLUMNS_OF_INTEREST = ["Synthese_eval_sanit", "geores"]


data = dataset.copy() # MAKE A CLEAN SLATE COPY FOR THIS SEGMENT


# SEARCH DATA KEYS TO KEEP
for name, group_data in data.groupby("Synthese_eval_sanit"):
    print(name)

# DROP USELESS COLUMNS, RESTRICT DATA

df = data[COLUMNS_OF_INTEREST].dropna()

# TRANSFORM "geores" BY SPLITTING IT IN "longitude", "latitude"
df[['lat', 'lng']] = df['geores'].str.split(', ', expand=True).astype(float)
df = df.drop('geores', axis=1)

# REMOVE USELESS ROWS
df = df[(df['Synthese_eval_sanit'] == 'A améliorer') | (df['Synthese_eval_sanit'] == 'A corriger de manière urgente')]
df = df[df['lat'] > 30]

df.describe()

# Visualise and analyse data

plt.scatter(df['lng'], df['lat'], s=2)

plt.xlabel('Longitude')
plt.ylabel('Lattitude')
plt.title('Nuage de points')

plt.show()

# V1

# CREATE INITIAL MODEL AND EVALUATE

df_cluster = df.copy()

# COUNT OF CLUSTER WANTED
k = 800

# CREATE KMEANS MODEL
kmeans = KMeans(n_clusters=k, n_init="auto")

# FIT UNSUPERVISED MODEL
kmeans.fit(df_cluster[['lat', 'lng']])

# SAVE LABELS GENERATED BY MODEL
labels = kmeans.labels_

# ADD LABELS TO THE DATAFRAME
df_cluster['Cluster'] = labels

df_cluster.head()

plt.scatter(df_cluster['lng'], df_cluster['lat'], c=labels, cmap='viridis', s=3)
# plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=2, label='Centroids')
plt.xlabel('Longitude')
plt.ylabel('Lattitude')
plt.title(f'K-Means Clustering (k={k})')
plt.legend()
plt.show()

# ONLY KEEP CLUSTERS WITH A SIZE BIGGER THAN THE VARIABLE DEFINED

max_size = 10

clusters = df_cluster.groupby('Cluster').count()[df_cluster.groupby('Cluster').count()['lat'] > max_size].index.tolist()
len(clusters)

# COLOR CODING FOR VISUALISATION
def set_cluster(row):
    if row['Cluster'] in clusters:
        return 20
    else:
        return 1

df_cluster['Color'] = df_cluster.apply(set_cluster, axis=1)

plt.scatter(df_cluster['lng'], df_cluster['lat'], s=df_cluster['Color'], c=df_cluster['Color'])

# ADD LABELS AND A TITLE
plt.xlabel('Longitude')
plt.ylabel('Lattitude')
plt.title('Nuage de points')

# DISPLAY GRAPH
plt.show()


# V2

# CREATE INITIAL MODEL AND EVALUATE

df_cluster = df.copy()

# COUNT OF CLUSTER WANTED
k = 200

# CREATE KMEANS MODEL
kmeans = KMeans(n_clusters=k, n_init="auto")

# FIT UNSUPERVISED MODEL
kmeans.fit(df_cluster[['lat', 'lng']])

# SAVE LABELS GENERATED BY MODEL
labels = kmeans.labels_

# ADD LABELS TO THE DATAFRAME
df_cluster['Cluster'] = labels

df_cluster.head()

# VISUALIZE RESULTS
plt.scatter(df_cluster['lng'], df_cluster['lat'], c=labels, cmap='viridis', s=3)
plt.xlabel('Longitude')
plt.ylabel('Lattitude')
plt.title(f'K-Means Clustering (k={k})')
plt.legend()
plt.show()

max_size = 15

clusters = df_cluster.groupby('Cluster').count()[df_cluster.groupby('Cluster').count()['lat'] > 15].index.tolist()
len(clusters)


# COLOR AND SIZE CODING FOR VISUALISATION
def set_size(row):
    if row['Cluster'] in clusters:
        return 20
    else:
        return 1


def set_color(row):
    if row['Cluster'] in clusters:
        return row['Cluster']
    else:
        return 0


df_cluster['Size'] = df_cluster.apply(set_size, axis=1)
df_cluster['Color'] = df_cluster.apply(set_color, axis=1)

plt.scatter(df_cluster['lng'], df_cluster['lat'], s=df_cluster['Size'], c=df_cluster['Color'], marker="+")

plt.xlabel('Longitude')
plt.ylabel('Lattitude')
plt.title('Nuage de points')

plt.show()